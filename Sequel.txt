--To create a DATABASE
create database Test_data #select all the press execute or F5

--To create a TABLE 'emp' in the database 'Test_data'
use Test_data
create table emp
(
emp_id int,
last_name varchar(50) NOT NULL, #not null- to make entry in the column mandatory
first_name varchar(50) NOT NULL,
); 

--ALTER TABLE
alter table emp add age int #to add a new column with datatype INT

alter table emp drop column last_name #to delete a column (dont mention data type here, else error)

alter table emp alter column age numeric(10) #to alter the 'datatype' the column

--To delete a table (DROP A TABLE)
drop table emp;

--To create a PRIMARY KEY
create table test1    #name of the new table is 'test1'
(
emp_id int primary key,
last_name varchar(50) NOT NULL,
first_name varchar(50) NOT NULL,
);

--OR (this method is used to make multiple columns, the PRIMARY KEY- CANDIDATE KEY)
create table test2                                                                             --name of the table is 'test2'
(
emp_id int,
last_name varchar(50) NOT NULL,
first_name varchar(50) NOT NULL,
constraint emp_pk primary key (emp_id)                                                         --the name of the constraint is 'emp_pk', table name is 'emp_id'
);

create table test3
(
emp_id int,
last_name varchar(50) NOT NULL,
first_name varchar(50) NOT NULL,
constraint emp_pk1 primary key (last_name, first_name)                                         --both 'last_name, first_name' is the Primary Key i.e. Candidate key
);

--To create PRIMARY KEY later, after creating the table
alter table emp1 add constraint emp_pk2 primary key (emp_id);                                  --'emp_pk2' is the name of the constraint (but create the 'emp1' table first)
                                                                                        --NOTE- this method can be only used if it was specified that column 'emp_id' is NOT NULL

--FOREIGN KEY- create a panent table (product) first then create a constraint in the child table (orders)
create table product
(prod_id int primary key,
prod_name varchar(50) not null,
category varchar(50));

create table orders
(order_id int primary key,
prod_id int not null,
quantity int,
constraint prod_fk                                                                            --'prod_fk' is the name of the constraint
foreign key (prod_id)                                                                         --name of the column of the child table (orders)
references product (prod_id)                                        --name of the parent table (product) which is referenced & name of the column of the parent table (prod_id)
);

--To create FOREIGN KEY once the table has been created already
alter table order                                                                              --dont use the same child table 'order', create a child table of new name
add constraint prod_fk1                                                                        --the name of the constraint 'prod_fk1' has to be new
foreign key (prod_id)                                                              --the datatype of the 'column of the parent table' &'column of the child table' has to be same
references product (prod_id);

--To CREATE VIEW (not a table, acts as virtual table)
CREATE VIEW tview AS SELECT * FROM product;                                        --name of the view is 'tview', * for all columns, name of the existing table is 'product'

CREATE VIEW tview1 AS SELECT prod_id, category FROM product;       --name of the view is 'tview1', 'prod_id, category' are the columns required to view, from the table 'product'

--To INSERT data into table 'dept'
create table dept
(dept_no int,
dept_name varchar(50) not null
location varchar(50)
);                                                                                             --table named 'dept' was created first
INSERT INTO dept (dept_no, dept_name) VALUES (20, 'sales');                         --values inserted, to view the values-right click the table and select 'SELECT TOP 1000 ROWS'
--OR
INSERT INTO dept VALUES (20, 'sales','ccu');                                             --if inserting value to all columns, no need to mention column names inside the bracket 

--To INSERT values from another table
create table dept1
(dept_no INT,
dept_name varchar(50),
location varchar(50)
);                                                                                                            --create a table 'dept1' to copy from table 'dept'
INSERT INTO dept1 (dept_no, dept_name,location) SELECT * FROM dept;                                           --'*' is to copy all values
INSERT INTO dept1 (dept_no,dept_name) SELECT dept_name FROM dept;                                             --to copy only values of specific columns like 'dept_name' column
INSERT INTO dept1 (dept_no, dept_name,location) SELECT * FROM dept WHERE dept_no > 10;                        --to copy selctive data

--To UPDATE data in a table (modify existing data- very important to provide condition, else all rows will be affected)
create table lords
(dept_no INT NOT NULL,
dept_name varchar(50),
location varchar(50)
);                                                                                                            --new table named 'lords' created and 4 values were inserted
insert into lords values (10,'accounts','MAA');
insert into lords values (20,'HR','BOM');
insert into lords values (30,'IT','BLR');
insert into lords values (10,'marketing','CCU');

UPDATE lords SET dept_name = 'sales' where dept_no = 20;                                                      --modified the value in 'dept_name' column where 'dept_no' is 20

--To DELETE rows/records (condition giving is important else all the records will be deleted)
DELETE FROM lords WHERE dept_no = 30;      #entire row is deleted from table 'lords' whose 'dept_no' is '30'

--To SELECT (fetch) datas from a table
SELECT * FROM lords;                                                           --to retrieve all rows & all columns
SELECT TOP(2) * FROM lords;                                                    --to retrieve all columns & top 2 rows
SELECT dept_no, location FROM lords;                                           --to select required columns & all rows
SELECT dept_no AS Department_number, location FROM lords;                      --to provide an alias to the selected column, here 'dept_no' given an alias of 'Department_number'
SELECT * FROM lords ORDER BY dept_no ASC;                                      --to select only the unique values in column 'dept_no' in ascending order
SELECT * FROM lords ORDER BY dept_no DESC;                                     --to select only the unique values in column 'dept_no' in decending order
SELECT TOP(2) * FROM lords ORDER BY dept_no DESC;                              --to retrieve all columns & bottom 2 rows

--FILTERING (LOGICAL: AND, OR, NOT)
SELECT * FROM lords WHERE dept_no = 10 AND dept_name = 'sales';                --use of 'AND' operator
SELECT * FROM lords WHERE dept_no = 10 OR dept_name = 'sales';                 --use of 'OR' operator
SELECT * FROM lords WHERE location NOT IN ('CCU');                             --use of 'NOT' operator
SELECT dept_no, location FROM lords WHERE location NOT IN ('MAA', 'CCU');      --use of 'NOT IN' operator/ opposite of 'IN' operator

--FILTERING (COMPARISION: =, !=, >, <, >=, <=, LIKE, BETWEEN, IN)
create table employee
(emp_id int primary key,
first_name varchar(50) not null,
last_name varchar(50) not null,
manager_no int,
phn_no int,
hire_date date,
job varchar(50),
dept_no int,
salary int
);                                                                                                           --create a table 'employee' first & insert 9 values into each column
insert into employee values (101, 'Avra', 'Dey', null, null, null, 'j7', 10, null);
insert into employee values (102, 'Deepu', 'Nayak', 1001, null, null, 'j2', 10, null);
insert into employee values (103, 'Soumava', 'Banerjee', 1001, null, null, 'j3', 10, null);
insert into employee values (104, 'Subha', 'Mitra', null, null, '2020-10-23', 'j4', 20, 40000);
insert into employee values (105, 'Ankana', 'Chaudhury', 1004, null, '2019-03-01', 'j5', 20, null);
insert into employee values (106, 'Gargi', 'Prasad', 1001, null, '2019-07-01', 'j6', 30, 38000);
insert into employee values (107, 'Nayan', 'Chak', 1006, null, '2016-09-14', 'j1', 10, 28000);
insert into employee values (108, 'Bikko', 'Ghosh', 1006, null, null, 'j8', 40, null);
insert into employee values (109, 'Soyel', 'Ghosh', null, null, null, 'j7', 30, null);

SELECT * FROM employee WHERE salary BETWEEN 30000 AND 40000;                                              --use of 'BETWEEN' & 'AND' operator, returns two rows 'subha' & 'gargi'
SELECT * FROM lords WHERE location IN ('MAA', 'CCU');                                                     --use of 'IN' operator
SELECT * FROM employee WHERE salary > 20000;                                                              --use of ' > ' operator, returns 3 records(gargi, subha, nayan)
SELECT * FROM employee WHERE salary >= 40000;                                                             --use of ' >= ' operator, returns 1 record(subha)
SELECT * FROM EMPLOYEE WHERE SALARY IS NULL;                                                              --use of 'IS' operator, also indicating SQL is not case sensitive
SELECT * FROM employee WHERE salary IS NOT NULL;                                                          --use of 'IS NOT' operator

--LIKE operator (to search records that are begining or ending with a perticular letter)
SELECT * FROM lords WHERE location LIKE 'C%';                                                     --to search for records whose 'location' is starting with 'C'
SELECT * FROM lords WHERE location LIKE '%A';                                                     --to search for records whose 'location' is ending with 'A'
SELECT * FROM lords WHERE location LIKE 'B%M';                                                    --to search for records whose 'location' is starting with 'B' & ending with 'M'

--CASE expression (WHEN-ELSE statements(like if-else))
SELECT CASE (location)
WHEN 'MAA' THEN 'Tamil Nadu'
WHEN 'BOM' THEN 'Maharashtra'
ELSE 'No idea'
END
FROM lords;                                                                                       --shows 'MAA' as 'Tamil Nadu', 'BOM' as 'Maharashtra' & 'CCU' as 'No idea'

--JOINS (self, inner, left, right, full-outer, cross)- fetch/ combine data from 2 or more tables
create table employ
(emp_id int primary key,
first_name varchar(50) not null,
last_name varchar(50) not null,
address varchar(50)
);                                                                                                --table 'employ' was created & the below 6 values were inserted
insert into employ values (101, 'Avra', 'Dey', 'Asansol'); 
insert into employ values (102, 'Deepu', 'Nayak', 'Durgapur');
insert into employ values (103, 'Subha', 'Mitra', 'Kasba');
insert into employ values (104, 'Soumava', 'Banerjee', 'Behala');
insert into employ values (105, 'Gargi', 'Prasad', null);
insert into employ values (106, 'Ankana', 'Chaudhury', 'Kalighat');
create table orderss
(order_id int primary key,
emp_id int,
order_date date
);                                                                                                --table 'orderss' was created & the below 5 values were inserted 
insert into orderss values (1, 104, '2020-05-23');
insert into orderss values (2, 102, '2020-07-18');
insert into orderss values (3, 105, '2020-05-16');
insert into orderss values (4, 101, '2020-12-30');
insert into orderss values (5, null, '2020-02-02');

SELECT employ.emp_id, orderss.order_id, orderss.order_date
FROM employ
INNER JOIN orderss
ON employ.emp_id = orderss.emp_id
ORDER BY employ.emp_id;                                                                           --applying 'INNER JOIN'

SELECT e.emp_id, o.order_id, o.order_date
FROM employ AS e
INNER JOIN orderss AS O
ON e.emp_id = o.emp_id
ORDER BY e.emp_id;                                                                                --applying 'INNER JOIN' using table aliases 'e' & 'o'

SELECT employ.emp_id, orderss.order_id, orderss.order_date
FROM employ
LEFT OUTER JOIN orderss
ON employ.emp_id = orderss.emp_id
ORDER BY employ.emp_id;                         --appyling 'LEFT OUTER JOIN', returning all values from'employ' table & putting 'NULL' where data is not there in 'orderss' table

SELECT employ.emp_id, orderss.order_id, orderss.order_date
FROM employ
RIGHT OUTER JOIN orderss
ON employ.emp_id = orderss.emp_id
ORDER BY employ.emp_id;                                                                           --appyling 'RIGHT OUTER JOIN'

SELECT employ.emp_id, orderss.order_id, orderss.order_date
FROM employ
FULL OUTER JOIN orderss
ON employ.emp_id = orderss.emp_id
ORDER BY employ.emp_id;                                                                           --appyling 'FULL OUTER JOIN', returns 7 rows

SELECT employ.emp_id, orderss.order_id, orderss.order_date
FROM employ
CROSS JOIN orderss
ORDER BY employ.emp_id;                                               --applying 'CROSS JOIN', shows output of 30 abservation as 'employ' table has 6 records and 'orderss' has 5

--BUILT-IN functions (COVERSION, LOGICAL, MATH, AGGREGATE, STRING, DATE)
select CAST ('10' AS int) * 20 AS casting,
       CONVERT (int,'10') * 20 AS converting;                                 --CONVERSION (CAST & CONVERT) functions, converts 10 into integer even though it is in inverted comma & multiply by 20

select TRY_CAST ('A' AS int) * 20 AS tcasting,
       TRY_CONVERT (int,'A') * 20 AS tconverting;                             --CONVERSION (TRY_CAST & TRY_CONVERT), retuns NULL but do not show error message

select CHOOSE (3, 'avra', 'deepu', 'subha', 'soumava');                       --LOGICAL (CHOOSE) function, returns 'subha'

select IIF (1>10, 'True', 'False');                                           --LOGICAL (IIF) function, returns 'False'
select IIF (1>10, 'avra', 'deepu');                                           --returns 'deepu'
select IIF (1>10, 'True', 'False') AS result;                                 --header 'result' will show

select ABS(-10);                                                              --MATH funtion (absolute value)
select RAND(0.7);                                                             --returns a pseudo-random float value
select EXP(-5);                                                               --exponential of (-5)
select ROUND(6.666666666, 3);                                                 --upto 3 decimal place
select FLOOR(4.66);                                                           --returns 4
select CEILING(4.66);                                                         --returns 5
select SIGN(-6);                                                              --returns -1 (shows positive OR negative values)
select SQUARE(-15);                                                           --returns 225
select SQRT(225);                                                             --returns 15
select POWER(-2,3);                                                           --returns 8

select AVG (dept_no) FROM lords;                                              --AGGREGATE function (AVERAGE), returns 13 
select MIN (dept_no) FROM lords;
select MAX (dept_no) FROM lords;
select SUM (dept_no) FROM lords;
select COUNT (dept_no) FROM lords;

select REPLACE ('abcdef', 'ab', 'xy');                                        --STRING function, replaces 'ab' with 'xy' in 'abcdef
select SUBSTRING ('abcdef', 2, 3);                                            --from 2nd letter counts 3 and shows output, returns 'bcd'
select LEFT ('abcdef', 2);                                                    --from LEFT shows 1st two letters
select RIGHT ('abcdef', 2);                                                   --from RIGHT shows 1st two letters
select REVERSE ('abcde');                                                     --returns 'edcba'
select LTRIM ('       abcd      ');                                           --removes 'spaces' on the 'left' side
select RTRIM ('       abcd      ');                                           --removes 'spaces' on the 'right' side
select UPPER ('abc');                                                         --returns 'ABC'
select LOWER ('ABC');                                                         --returns 'abc'

select DATEPART (mm, '16-dec-2020');                                          --returns 12, as 'dec' is the 12th month
select DATEADD (dd, 2, '2020-12-23');                                         --adds 2 days, returns '25th dec 2020'

--Stored Procedure (Statements that ared created & stored in the database)
CREATE PROCEDURE dbo.getdetails
AS  
select * from lords
GO                                                                            --stored procedure created [NOTE: dont end with semi-colon(;)
EXEC dbo.getdetails;                                                          --to 'execute' the stored procedure

CREATE PROCEDURE dbo.getdetails1
@dept_no Nvarchar(50)
AS
select * from lords
WHERE dept_no = @dept_no
GO                                                                            --stored procedure with a single parameter 'dept_no'
EXEC dbo.getdetails1 @dept_no = 20;                                           --returns 'BOM' & 'sales'

CREATE PROCEDURE dbo.getdetails2
@dept_no Nvarchar(50), @dept_name Nvarchar(50)
AS
select * from lords
WHERE dept_no = @dept_no AND dept_name = @dept_name
GO                                                                            --stored procedure with 2 parameters
EXEC dbo.getdetails2 @dept_no = 20, @dept_name = 'sales';                     --to execute 2 parameters

--USER DEFINED functions
--SCALER functions
CREATE FUNCTION no_para()
RETURNS int AS
BEGIN
RETURN (select SUM(salary) FROM employee)
END;
select dbo.no_para();                                                         --to run the SCALER function 'dbo.no_para' having no parameter

ALTER FUNCTION no_para()
RETURNS int AS
BEGIN
RETURN (select AVG(salary) FROM employee)
END;
select dbo.no_para();                                                                                   --to ALTER the previous function 'no_para' from 'sum' to 'average'                                     
CREATE FUNCTION full_name (@first_name varchar(50), @last_name varchar(50))
RETURNS varchar(100) AS
BEGIN
RETURN (select @first_name + space(2) + @last_name)
END;
select dbo.full_name ('Avrajit', 'Dey');                                                                --SCALER function with parameters 'first_name' & 'last_name'

--Inline TABLE-VALUED functions
CREATE FUNCTION top_5()
RETURNS TABLE AS
RETURN (select top 5 * FROM employee);
select * from dbo.top_5();                                                                              --top 5 names from the table 'employee'

CREATE FUNCTION top_2(@emp_id int)
RETURNS TABLE AS
RETURN (select top 2 * FROM employee WHERE emp_id > @emp_id);
select * from dbo.top_2 (102);                                                                          --top 2 names from table 'employee' whose emp_id > 102, returns 103 & 104


