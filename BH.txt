--TO_CHAR

select customer_invoicehistory.id "invoice_history_id", customer_customerinvoice.invoice_number "Invoice_no", 
to_char(customer_invoicehistory.created_time, 'dd-mm-yyyy') "Sent_to_cus_date",
customer_customerinvoice.invoice_date "Invoice_date",
customer_invoicehistory.old_status "Old_status", 
customer_invoicehistory.new_status "current_status",
users_user.name "Action_owner"
from customer_invoicehistory
left join customer_customerinvoice on customer_invoicehistory.invoice_id = customer_customerinvoice.id
left join users_user on customer_invoicehistory.action_owner_id = users_user.id
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--CONCATENATION

select taxable_amount||' , '||status 
"Concat"

from customer_customerinvoice

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--LAT & LONG

select to_char(oo.date_placed, 'dd-mm-yyyy') "Date", oo.id, oo.number as AWB_number, oo.status order_status, cc.name as customer, ac.name as city, oo.source, 
oe.status as event_status, st_x(oe.current_location) as delivered_long, st_y(oe.current_location) as delivered_lat
from order_order oo
join address_city ac on ac.id = oo.city_id
join customer_customer cc on cc.id = oo.customer_id
join order_event oe on oe.order_id = oo.id
where order_type = 'shipment' and cc.name = 'APOLLO PHARMACIES LIMITED'
order by ac.name, oo.id desc, oe.created_date


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--CTE

WITH supervisor_cte AS
(SELECT users_user.id "uID", users_user.name "scontact", address_hub.id "hid"
FROM address_hub_supervisors
LEFT JOIN users_user ON users_user.id = address_hub_supervisors.user_id
LEFT JOIN address_hub ON address_hub.id = address_hub_supervisors.hub_id),

associate_cte AS
(SELECT users_user.id "uID", users_user.name "acontact", address_hub.id "hid"
FROM address_hub_associates
LEFT JOIN users_user ON users_user.id = address_hub_associates.user_id
LEFT JOIN address_hub ON address_hub.id = address_hub_associates.hub_id),

hubcontact_cte AS
(SELECT users_user.id "uID", users_user.name "hcontact", address_hub.id "hid"
FROM address_hub_customer_hub_contact
LEFT JOIN users_user ON users_user.id = address_hub_customer_hub_contact.customerhubcontact_id
LEFT JOIN address_hub ON address_hub.id = address_hub_customer_hub_contact.hub_id)

SELECT address_hub.Name "Hub Name", address_hub.awb_code "Hub Short Identifier for AWB", address_city.Name "City", address_hub.store_code "Store Code",
address_hub.pincodes "Pincodes", customer_customer.Name "Customer", address_hub.client_billing_code "Client Billing Code", address_hub.shipping_code "Shipping Code",
address_hub.Coverage "Coverage", address_hub.extended_coverage "Extended Coverage",
supervisor_cte.scontact "Supervisor Contact", associate_cte.acontact "Associate Contact", hubcontact_cte.hcontact "Customer Hub Contact"
FROM address_hub
LEFT JOIN address_city ON address_hub.city_id = address_city.id
LEFT JOIN customer_customer ON address_hub.customer_id = customer_customer.id
LEFT JOIN supervisor_cte ON address_hub.id = supervisor_cte.hid
LEFT JOIN associate_cte ON address_hub.id = associate_cte.hid
LEFT JOIN hubcontact_cte ON address_hub.id = hubcontact_cte.hid


-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--CASE WHEN THEN ELSE END

select customer_id, taxable_amount

, CASE
when taxable_amount > 10000 then 'High bill'
else 'Low bill'

end "Bill type"

from customer_customerinvoice

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--DISTINCT COUNT & BETWEEN

select city_id, count(distinct(customer_id))
from order_order

where to_char(date_placed, 'dd-mm-yyyy')

between '01-12-2021' and '5-12-2021'

group by city_id

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--DENSE_RANK & RANK

select customer_id, taxable_amount

, RANK () OVER (order by taxable_amount desc)

from customer_customerinvoice

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--RANK & PARTITION BY

select customer_id, taxable_amount, invoice_type

, RANK () OVER (partition by invoice_type order by taxable_amount desc)

from customer_customerinvoice

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--CAST & convert (one datatype to another)

select customer_id, taxable_amount,
cast(taxable_amount as float) * 10
from customer_customerinvoice


select id, created_date,
cast(created_date as varchar)
from order_order

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--FILTER

select fod."First Out-For-Delivery Datetime" as "First Out-For-Delivery Datetime", 

lod."Latest Out-For-Delivery Datetime" as "Latest Out-For-Delivery Datetime",

(case when atp."First Attempted Datetime"  is null then (case when dlv."Delivered Datetime" is null then ret."Returned Datetime" else dlv."Delivered Datetime" end) else atp."First Attempted Datetime"  end) as "First Attempted Datetimes", 

(case when ret."Returned Datetime" is null then (case when dlv."Delivered Datetime" is null then ltp."Latest Attempted Datetime" else dlv."Delivered Datetime" end) else ret."Returned Datetime" end) as "Latest Attempted Datetimes",
from da
left join pck on pck."Order Id" = da."Order Id"
where oo.order_type = 'shipment' and oo.status != 'Dummy' and c.contract_type = 'Shipment' and oo.updated_time::Date between {{start}} and {{end}}
[[and ac.name = {{city}}]] [[and oo.status = {{status}}]] [[and oo.number = {{number}}]] [[ and lower(cc.name) like '%' || {{customer}} || '%' ]]




select 
(to_char(oo.date_placed,'dd-mm-yyyy')  ||' '||to_char(oo.date_placed,'HH24:MI')) "Date Placed",  

(pa.line1 ||' '|| pa.line2 || ' '|| pa.line3 || ' '|| pa.line4) "Pickup Address", 

(sa.title ||' '|| sa.first_name || ' '|| sa.last_name) "Customer Name", sa.phone_number "Customer Phone", dd.name || ' | ' || vv.registration_certificate_number "Driver Vehicle",

(sa.line1 ||' '|| sa.line2 || ' '|| sa.line3 || ' '|| sa.line4) "Customer Address", 
(to_char(dt."Pick Up Datetime",'dd-mm-yyyy')  ||' '||to_char(dt."Pick Up Datetime",'HH24:MI')) "Picked on", 
(to_char(dt."First Attempted Datetimes",'dd-mm-yyyy')  ||' '||to_char(dt."First Attempted Datetimes",'HH24:MI')) "First attempted on",
(to_char(dt."Latest Attempted Datetimes",'dd-mm-yyyy')  ||' '||to_char(dt."Latest Attempted Datetimes",'HH24:MI')) "Last attempted on", 
(to_char(dt."First Out-For-Delivery Datetime",'dd-mm-yyyy')  ||' '||to_char(dt."First Out-For-Delivery Datetime",'HH24:MI')) "First Out-For-Delivery on",
(to_char(dt."Latest Out-For-Delivery Datetime",'dd-mm-yyyy')  ||' '||to_char(dt."Latest Out-For-Delivery Datetime",'HH24:MI')) "Latest Out-For-Delivery on", 
(to_char(dt."Delivered Datetime",'dd-mm-yyyy')  ||' '||to_char(dt."Delivered Datetime",'HH24:MI')) "Delivered on",

from order_order oo
left join dt on dt."Order Number" = oo.number

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- LAG & PARTITION

select emp_id, punch_type, time

, LAG(time, 1) OVER (PARTITION BY emp_id order by time) "ptime"
, LAG(punch_type, 1) OVER (PARTITION BY emp_id order by punch_type) "ptype"

from employee

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--1621 QUERY

with t_cte as
(select 
trip_trip.id "tid", trip_trip.trip_number "tno", driver_driver.name "dname", driver_driver.driver_vehicle "vno"

from trip_trip

left join driver_driver
on trip_trip.driver_id = driver_driver.id),

o_cte as
(select 
order_order.id "oid", order_order.reference_number "orn", address_city.name "city", address_hub.name "dhub", customer_customer.id "cid", customer_customer.name "cname",
order_order.number "ono", order_order.customer_reference_number "crn", order_order.date_placed "odp"

from order_order

left join address_city on address_city.id = order_order.city_id
left join address_hub on address_hub.id = order_order.hub_id
left join customer_customer on customer_customer.id = order_order.customer_id),

d_date as
(select order_id "oid", max(time) "deliverd_date"
from order_event
where status =  'Delivered' 
group by order_id),


d_dch as
(select 
driver_cashhandover.id "cid", users_user.email "email"

from driver_cashhandover

left join users_user on users_user.id = driver_cashhandover.collected_by_id),

o_oph as
(select 
order_orderpaymenthistory.order_id "oid", users_user.email "last_modified_by", max(order_orderpaymenthistory.modified_date) "date_modified"

from order_orderpaymenthistory
left join users_user on users_user.id = order_orderpaymenthistory.modified_by_id
group by order_orderpaymenthistory.order_id, users_user.id)



select 
o_cte.cname "Customer", o_cte.city "City", o_cte.dhub "Delivery hub" , o_cte.ono "Order no", o_cte.orn "Order Reference", o_cte.crn "Customer Refrence" , 
to_char(o_cte.odp, 'dd-mm-yyyy') "Order Placed", 
to_char(d_date.deliverd_date, 'dd-mm-yyyy') "Delivered Date", payment_ordercodpayment.status "COD status", payment_ordercodpayment.amount "COD amount", 
payment_ordercodpayment.utr "UTR Number", payment_ordercodpayment.ack_ref "Ack no",  d_dch.email "Handover Email",
t_cte.tno "Trip no", t_cte.dname "Driver Name",
t_cte.vno "Vehicle no", o_oph.last_modified_by "Last Modified By", to_char(o_oph.date_modified, 'dd-mm-yyyy') "Last Modified Date"

from payment_ordercodpayment

left join t_cte on t_cte.tid = payment_ordercodpayment.trip_id
left join o_cte on o_cte.oid = payment_ordercodpayment.order_id
left join d_dch on d_dch.cid = payment_ordercodpayment.cash_handover_id
left join o_oph on o_oph.oid = payment_ordercodpayment.order_id
left join d_date on d_date.oid = payment_ordercodpayment.order_id

where True [[and d_date.deliverd_date::date between {{start}} and {{end}}]]

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--DATE INTERVAL

where wms_client.id = 4 
and omg.made::timestamp >= (current_date - interval '1 day') + interval '9 hours'
and omg.made::timestamp <= (current_date) + interval '9 hours'

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--to_char(wms_wmsmanifestline.modified_date, 'dd-mm-yyyy hh24:mi')

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------

--DATE TRUNC



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------



