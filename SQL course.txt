create table Movie
(mID int primary key,
title varchar(50),
year int,
director varchar(20));

insert into Movie values (101, 'Gone with the Wind', 1939, 'Victor Fleming');
insert into Movie values (102, 'Star Wars', 1977, 'George Lucas');
insert into Movie values (103, 'The Sound of Music', 1965, 'Robert Wise');
insert into Movie values (104, 'E.T.', 1982, 'Steven Spielberg');
insert into Movie values (105, 'Titanic', 1997, 'James Cameron');
insert into Movie values (106, 'Snow White', 1937, null);
insert into Movie values (107, 'Avatar', 2009, 'James Cameron');
insert into Movie values (108, 'Raiders of the Lost Ark', 1981, 'Steven Spielberg');

select * from Movie;

---------------------------------------------------------------------------------------------------------------------------------

Create table Reviewer
(rID int primary key,
name varchar(20));

insert into Reviewer values(201, 'Sarah Martinez');
insert into Reviewer values(202, 'Daniel Lewis');
insert into Reviewer values(203, 'Brittany Harris');
insert into Reviewer values(204, 'Mike Anderson');
insert into Reviewer values(205, 'Chris Jackson');
insert into Reviewer values(206, 'Elizabeth Thomas');
insert into Reviewer values(207, 'James Cameron');
insert into Reviewer values(208, 'Ashley White');

select * from Reviewer;

---------------------------------------------------------------------------------------------------------------------------------

create table Rating
(rID int,
mID int,
stars int,
ratingDate date);

insert into Rating values(201, 101, 2, '2011-01-22');
insert into Rating values(201, 101, 4, '2011-01-27');
insert into Rating values(202, 106, 4, null);
insert into Rating values(203, 103, 2, '2011-01-20');
insert into Rating values(203, 108, 4, '2011-01-12');
insert into Rating values(203, 108, 2, '2011-01-30');
insert into Rating values(204, 101, 3, '2011-01-09');
insert into Rating values(205, 103, 3, '2011-01-27');
insert into Rating values(205, 104, 2, '2011-01-22');
insert into Rating values(205, 108, 4, null);
insert into Rating values(206, 107, 3, '2011-01-15');
insert into Rating values(206, 106, 5, '2011-01-19');
insert into Rating values(207, 107, 5, '2011-01-20');
insert into Rating values(208, 104, 3, '2011-01-02');

select * from Rating;

---------------------------------------------------------------------------------------------------------------------------------

--Q: Find the titles of all movies directed by Steven Spielberg.

select title
from Movie 
where director = 'Steven Spielberg';


--Q: Find all years that have a movie that received a rating of 4 or 5, and sort them in increasing order.

select year
from Movie
where mID
in (select mID from Rating where stars = 4 or stars = 5)
order by year asc;


--Q: Find the titles of all movies that have no ratings.

select title
from Movie
where Movie.mID
not in (select Rating.mID from Rating where Movie.mID = Rating.mID)
order by title asc; 


--Q: Some reviewers didn't provide a date with their rating. Find the names of all reviewers who have ratings with a NULL value for the date.

select name
from Reviewer
where rID
in (select rID from Rating where ratingDate is null);


--Q: Write a query to return the ratings data in a more readable format: reviewer name, movie title, stars, and ratingDate. Also, sort the data, 
--first by reviewer name, then by movie title, and lastly by number of stars.

select Reviewer.name, Movie.title, Rating.stars, Rating.ratingDate
from Reviewer, Movie, Rating
where Movie.mID = Rating.mID
and Reviewer.rID = Rating.rID
order by Reviewer.name, Movie.title;


--Q: For all cases where the same reviewer rated the same movie twice and gave it a higher rating the second time, return the reviewer's name and the title of the movie.


--Q: For each movie that has at least one rating, find the highest number of stars that movie received. Return the movie title and number of stars. Sort by movie title.

select Movie.title, max(Rating.stars)
from Movie, Rating
where Rating.mID = Movie.mID
group by Movie.title;


--Q: For each movie, return the title and the 'rating spread', that is, the difference between highest and lowest ratings given to that movie. Sort by rating spread from highest to lowest, then by movie title.

WITH maxmin_cte AS
(SELECT Movie.mID "ID", Movie.title "Title", max(Rating.stars) "Max", min(Rating.stars) "Min"
FROM Movie, Rating
WHERE Movie.mID = Rating.mID
GROUP BY Movie.mID);
SELECT Title, (Max-Min) 
FROM maxmin_cte
ORDER BY (Max-Min) DESC, Title;


--Q: Find the difference between the average rating of movies released before 1980 and the average rating of movies released after 1980. (Make sure to calculate the average rating for each movie, then the average of those averages for movies before 1980 and movies after. Don't just calculate the overall average rating before and after 1980).

WITH avg_cte AS 
(SELECT Movie.title "title", Movie.year "year", AVG(Rating.stars) "stars"
FROM Rating, Movie
WHERE Rating.mID = Movie.mID
GROUP BY Year);
SELECT DISTINCT ((select AVG(avg_cte.stars) from avg_cte where avg_cte.year < 1980) - (select AVG(avg_cte.stars) from avg_cte where avg_cte.year > 1980))
FROM avg_cte;


--Q: Find the names of all reviewers who rated Gone with the Wind.

select distinct Reviewer.name
from Movie, Reviewer, Rating
where Movie.mID = Rating.mID
and Reviewer.rID = Rating.rID
and Rating.mID = 101;


--Q: For any rating where the reviewer is the same as the director of the movie, return the reviewer name, movie title, and number of stars.

select Reviewer.name, Movie.title, Rating.stars
from Reviewer, Movie, Rating
where Movie.mID = Rating.mID
and Reviewer.rID = Rating.rID
and Movie.director = Reviewer.name;


--Q: Return all reviewer names and movie names together in a single list, alphabetized. (Sorting by the first name of the reviewer and first word in the title is fine; no need for special processing on last names or removing "The").

SELECT DISTINCT Movie.title
FROM Movie
UNION
SELECT DISTINCT Reviewer.name
FROM Reviewer
ORDER BY Movie.title;


--Q: Find the titles of all movies not reviewed by Chris Jackson.

SELECT title 
FROM Movie
WHERE title NOT IN 
(SELECT Movie.title FROM Movie, Rating WHERE Movie.mID=Rating.mID AND Rating.rID = 205);


--Q: For all pairs of reviewers such that both reviewers gave a rating to the same movie, return the names of both reviewers. Eliminate duplicates, don't pair reviewers with themselves, and include each pair only once. For each pair, return the names in the pair in alphabetical order.


--Q: For each rating that is the lowest (fewest stars) currently in the database, return the reviewer name, movie title, and number of stars.

SELECT Reviewer.name, Movie.title, Rating.stars
FROM Movie, Reviewer, Rating
WHERE Movie.mID = Rating.mID AND Reviewer.rID = Rating.rID AND Rating.stars IN (SELECT min(Rating.stars) FROM Rating);


--Q: List movie titles and average ratings, from highest-rated to lowest-rated. If two or more movies have the same average rating, list them in alphabetical order.

--Q: Find the names of all reviewers who have contributed three or more ratings. (As an extra challenge, try writing the query without HAVING or without COUNT.)

--Q: Some directors directed more than one movie. For all such directors, return the titles of all movies directed by them, along with the director name. Sort by director name, then movie title. (As an extra challenge, try writing the query both with and without COUNT.)

--Q: Find the movie(s) with the highest average rating. Return the movie title(s) and average rating. (Hint: This query is more difficult to write in SQLite than other systems; you might think of it as finding the highest average rating and then choosing the movie(s) with that average rating.)

--Q: Find the movie(s) with the lowest average rating. Return the movie title(s) and average rating. (Hint: This query may be more difficult to write in SQLite than other systems; you might think of it as finding the lowest average rating and then choosing the movie(s) with that average rating.)

--Q: For each director, return the director's name together with the title(s) of the movie(s) they directed that received the highest rating among all of their movies, and the value of that rating. Ignore movies whose director is NULL.

--Q: Add the reviewer Roger Ebert to your database, with an rID of 209.

insert into Reviewer values (209, 'Roger Ebert');


--Q: For all movies that have an average rating of 4 stars or higher, add 25 to the release year. (Update the existing tuples; don't insert new tuples.)

--Q: Remove all ratings where the movie's year is before 1970 or after 2000, and the rating is fewer than 4 stars.
